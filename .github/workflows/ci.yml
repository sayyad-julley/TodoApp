name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  AWS_REGION: us-east-1

jobs:
  # Lint and format check
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci
          cd ../backend && npm ci

      - name: Run ESLint
        run: |
          npm run lint:frontend
          npm run lint:backend

      - name: Check Prettier formatting
        run: |
          npm run format:check

  # Frontend tests
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci

      - name: Run frontend tests
        run: |
          cd frontend
          npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend

  # Backend tests
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: todoapp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci

      - name: Run database migrations
        run: |
          cd backend
          npm run migrate:test
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: todoapp_test
          DB_USER: postgres
          DB_PASSWORD: postgres

      - name: Run backend tests
        run: |
          cd backend
          npm run test:coverage
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: todoapp_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          JWT_SECRET: test-secret

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend

  # E2E tests
  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [lint, test-frontend, test-backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci
          cd ../backend && npm ci
          cd ../tests/e2e && npm ci

      - name: Start services
        run: |
          docker-compose up -d postgres redis
          sleep 10

      - name: Run migrations
        run: |
          cd backend
          npm run migrate:test
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: todoapp_test
          DB_USER: postgres
          DB_PASSWORD: postgres

      - name: Start backend
        run: |
          cd backend
          npm start &
          sleep 5
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: todoapp_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          JWT_SECRET: test-secret

      - name: Start frontend
        run: |
          cd frontend
          npm run build
          npm run preview &
          sleep 5

      - name: Run E2E tests
        run: |
          cd tests/e2e
          npm run test

      - name: Upload E2E test results
        uses: actions/upload-artifact@v5
        if: failure()
        with:
          name: e2e-test-results
          path: tests/e2e/test-results/

  # Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and push Docker images
  build:
    name: Build & Push
    runs-on: ubuntu-latest
    needs: [lint, test-frontend, test-backend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push frontend image
        run: |
          cd frontend
          docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY-frontend:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY-frontend:$IMAGE_TAG
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: todoapp
          IMAGE_TAG: ${{ github.sha }}

      - name: Build and push backend image
        run: |
          cd backend
          docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY-backend:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY-backend:$IMAGE_TAG
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: todoapp
          IMAGE_TAG: ${{ github.sha }}

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to staging
        run: |
          aws cloudformation deploy \
            --template-file .aws/cloudformation/infrastructure.yml \
            --stack-name todoapp-staging \
            --parameter-overrides Environment=staging \
            --capabilities CAPABILITY_IAM

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, test-e2e]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to production
        run: |
          aws cloudformation deploy \
            --template-file .aws/cloudformation/infrastructure.yml \
            --stack-name todoapp-production \
            --parameter-overrides Environment=production \
            --capabilities CAPABILITY_IAM

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()
